import os

import numpy as np
import pandas as pd
import pytest

from smarttree import BaseSmartDecisionTree
from smarttree._tree_node import TreeNode


NUMERICAL_FEATURES = [
    "2. Возраст",
    "4. Если имеете супруга или партнера, как долго вы живете вместе (в годах)?",
    "6. Жив ли хотя бы один из Ваших родителей (да/нет)?",
    "8. Есть ли у Вас дети (да/нет)?",
    "9. Если да, сколько?",
    "10. Есть ли у Вас совершеннолетние дети (да/нет)?",
    "15. Есть ли у Вас домашние питомцы (да/нет)?",
    "16. В течение последних 7 дней, как часто Вы практиковали тяжелые физические нагрузки?",
    "17. В течение последних 7 дней, как часто Вы практиковали умеренные физические нагрузки?",
    "18. В течение последних 7 дней, как часто Вы ходили пешком минимум 10 минут без перерыва?",
    "22. Как долго Вы проживаете в этом месте (в годах)?",
    "24. Если Вы живете в многоквартирном доме, то на каком этаже?",
    "30. Вы курите (да/нет)?",
    "31. Количество родов",
    "32. Количество прерванных беременностей",
    "33. Гинекологические заболевания (да/нет)",
    "34. Заболевания щитовидной железы (да/нет)",
    "35. Наследственность (да/нет)",
]
CATEGORICAL_FEATURES = [
    "3. Семейное положение",
    "23. Каков тип Вашего дома?",
    "25. Каким транспортом Вы обычно пользуетесь?",
]
RANK_FEATURES = {
    "5. В какой семье Вы выросли?": [
        "полная семья, кровные родители",
        "мачеха/отчим",
        "мать/отец одиночка",
        "с бабушкой и дедушкой",
        "в детском доме",
    ],
    "7. Если да, как часто вы общаетесь?": [
        "я живу с моими родителями",
        "каждый день или почти каждый день",
        "раз в неделю",
        "один-два раза в месяц",
        "несколько раз в год",
        "я не общаюсь с родителями",
    ],
    "11. Если да, как часто вы общаетесь?": [
        "я живу с моими взрослыми детьми",
        "каждый день или почти каждый день",
        "раз в неделю",
        "один-два раза в месяц",
        "несколько раз в год",
        "я не общаюсь со взрослыми детьми",
    ],
    "12. Сколько человек живут вместе с Вами?": [
        "я живу одна",
        "1 человек",
        "2-3 человека",
        "4 и более человек",
    ],
    "13. Каковы Ваши взаимоотношения с соседями?": [
        "очень хорошие, дружеские",
        "хорошие",
        "нейтральные",
        "скорее плохие",
        "очень плохие",
        "я не знаю своих соседей",
        "у меня нет соседей",
    ],
    "14. Как часто Вы встречаетесь с друзьями?": [
        "несколько раз в неделю",
        "раз в неделю",
        "раз в месяц",
        "реже, чем раз в месяц",
    ],
    "19. Уровень Вашего образования?": [
        "средняя школа",
        "среднее специальное образование",
        "законченное высшее образование",
        "учёная степень",
    ],
    "20. Каков уровень образования Вашего партнера (если применимо)?": [
        "средняя школа",
        "среднее специальное образование",
        "законченное высшее образование",
        "учёная степень",
    ],
    "26. Сколько времени занимает Ваш путь до работы в одну сторону?": [
        "1 час и меньше",
        "1-3 часа",
        "более трёх часов",
    ],
    "27. Каков тип Вашей занятости?": [
        "полный рабочий день",
        "частичная занятость",
        "я работаю из дома",
        "я не работаю",
    ],
    "28. Каковы Ваши предпочтения в пище?": [
        "я ем мясо или рыбу ежедневно",
        "я ем мясо или рыбу 2-3 раза в неделю",
        "я практически не ем мясо/рыбу",
        "я вегетарианец/веган",
    ],
    "29. Каков тип Вашего питания?": [
        "3-4-разовое домашнее питание",
        "3-разовое питание, домашнее и в предприятиях общественного питания",
        "дома готовлю редко, питаюсь в предприятиях общественного питания",
        "регулярного режима питания нет",
    ],
}
TARGET_COL = "Метка"


@pytest.fixture(scope="session")
def data() -> pd.DataFrame:
    path = os.path.join("tests", "test_dataset.parquet")
    return pd.read_parquet(path)


@pytest.fixture(scope="session")
def X(data) -> pd.DataFrame:
    return data.drop(columns=TARGET_COL)


@pytest.fixture(scope="session")
def numerical_features() -> list[str]:
    return NUMERICAL_FEATURES


@pytest.fixture(scope="session")
def categorical_features() -> list[str]:
    return CATEGORICAL_FEATURES


@pytest.fixture(scope="session")
def rank_features() -> dict[str: list]:
    return RANK_FEATURES


@pytest.fixture(scope="session")
def y(data) -> pd.Series:
    return data[TARGET_COL]


@pytest.fixture(scope="function")
def root_node(X, y):
    return TreeNode(
        number=0,
        num_samples=y.apply(lambda x: True).sum(),
        depth=0,
        mask=y.apply(lambda x: True),
        hierarchy=dict(),
        available_features=X.columns.to_list(),
        impurity=0.67,
        distribution=np.array([199, 199, 197]),
        label="доброкачественная опухоль",
    )


class ConcreteSmartTree(BaseSmartDecisionTree):
    ...


@pytest.fixture(scope="function")
def concrete_smart_tree():
    return ConcreteSmartTree()
